import { useEffect, useState } from "react";
import { ActionSheetIOS, Alert } from "react-native";
import { Article } from "@/src/features/newfeeds/interface/article";
import restClient from "@/src/shared/services/RestClient";
import { Collection, CollectionItem } from "@/src/interface/interface_reference/collection";
import useCollectionPost from "@/src/features/collections/containers/post/useCollectionPost";
import AsyncStorage from "@react-native-async-storage/async-storage";

const reportsClient = restClient.apiClient.service("apis/reports");
const usersClient = restClient.apiClient.service("apis/users");
const notificationsClient = restClient.apiClient.service("apis/notifications");

export const usePostActions = (
  deleteArticle: (articleId: string) => void,
  editArticle: (articleId: string, newContent: string, newScope: string, newHashtags: string[]) => void,
  article: Article,
  userId: string
) => {
  const [isEditModalVisible, setEditModalVisible] = useState(false);
  const [isReportModalVisible, setReportModalVisible] = useState(false);
  const [editContent, setEditContent] = useState<string>("");
  const [editScope, setEditScope] = useState<string>("");
  const [editHashtags, setEditHashtags] = useState<string[]>([]);
  const [isSaved, setIsSaved] = useState(false);
  const [selectedReportReason, setSelectedReportReason] = useState<string>("");
  const [displayName, setDisplayName] = useState<string | null>(null); // Th√™m state cho displayName
  const { createCollection } = useCollectionPost();
  const isOwnPost = article.createdBy._id === userId;

  const getUserDisplayName = async () => {
    const name = await AsyncStorage.getItem("displayName");
    setDisplayName(name);
  };

  useEffect(() => {
    getUserDisplayName(); // L·∫•y displayName khi mount
  }, []);

  const openEditModal = (currentContent: string, currentScope: string, currentHashtags: string[]) => {
    setEditContent(currentContent || "");
    setEditScope(currentScope || "C√¥ng khai");
    setEditHashtags(currentHashtags || []);
    setEditModalVisible(true);
  };

  useEffect(() => {
    const checkIfArticleIsSaved = async () => {
      try {
        const userCollections = await usersClient.get(`${userId}/collections`);
        if (userCollections.success) {
          const defaultCollection = userCollections.data.find(
            (item: any) => item.collection.name === "T·∫•t c·∫£ b√†i vi·∫øt ƒë√£ l∆∞u"
          );
          if (defaultCollection) {
            const isArticleSaved = defaultCollection.collection.items.some(
              (item: CollectionItem) => item._id === article._id
            );
            setIsSaved(isArticleSaved);
          }
        }
      } catch (error) {
        console.error("L·ªói khi ki·ªÉm tra tr·∫°ng th√°i l∆∞u b√†i vi·∫øt:", error);
      }
    };
    checkIfArticleIsSaved();
  }, [article._id]);

const handleOptions = () => {
  if (isOwnPost) {
    ActionSheetIOS.showActionSheetWithOptions(
      {
        options: ["H·ªßy", "X√≥a b√†i vi·∫øt", "Ch·ªânh s·ª≠a", "B√°o c√°o"],
        destructiveButtonIndex: 1,
        cancelButtonIndex: 0,
      },
      (buttonIndex) => {
        switch (buttonIndex) {
          case 1:
            // Hi·ªÉn th·ªã dialog x√°c nh·∫≠n x√≥a
            Alert.alert(
              "X√°c nh·∫≠n x√≥a",
              "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i vi·∫øt n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.",
              [
                {
                  text: "H·ªßy",
                  style: "cancel",
                },
                {
                  text: "X√≥a",
                  style: "destructive",
                  onPress: () => deleteArticle(article._id), // Ch·ªâ x√≥a khi ng∆∞·ªùi d√πng x√°c nh·∫≠n
                },
              ]
            );
            break;
          case 2:
            openEditModal(article.content, article.scope, article.hashTag || []);
            break;
          case 3:
            setReportModalVisible(true);
            break;
          default:
            break;
        }
      }
    );
  } else {
    ActionSheetIOS.showActionSheetWithOptions(
      {
        options: ["H·ªßy", "B√°o c√°o"],
        cancelButtonIndex: 0,
      },
      (buttonIndex) => {
        switch (buttonIndex) {
          case 1:
            setReportModalVisible(true);
            break;
          default:
            break;
        }
      }
    );
  }
};

  const saveEdit = () => {
    if (editContent.trim() && editScope.trim()) {
      editArticle(article._id, editContent, editScope, editHashtags);
      setEditModalVisible(false);
    } else {
      Alert.alert("L·ªói", "Vui l√≤ng nh·∫≠p n·ªôi dung v√† ph·∫°m vi b√†i vi·∫øt.");
    }
  };

  const submitReport = async () => {
    if (!selectedReportReason.trim()) {
      Alert.alert("L·ªói", "Vui l√≤ng ch·ªçn l√Ω do b√°o c√°o.");
      return;
    }
    try {
      const response = await reportsClient.create({
        _idReporter: userId,
        reason: selectedReportReason,
        articleId: article._id,
        status: "pending",
      });

      if (response.success) {
        // G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi t·∫°o b√†i vi·∫øt n·∫øu kh√¥ng ph·∫£i l√† ng∆∞·ªùi b√°o c√°o
        if (userId !== article.createdBy._id) {
          try {
            await notificationsClient.create({
              senderId: userId,
              receiverId: article.createdBy._id,
              message: `${displayName || "M·ªôt ng∆∞·ªùi d√πng"} ƒë√£ b√°o c√°o b√†i vi·∫øt c·ªßa b·∫°n v·ªõi l√Ω do: ${selectedReportReason}`,
              status: "unread",
            });
          } catch (notificationError) {
            console.error("üî¥ L·ªói khi g·ª≠i th√¥ng b√°o b√°o c√°o:", notificationError);
          }
        }

        Alert.alert("Th√†nh c√¥ng", "B√°o c√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
      } else {
        Alert.alert("L·ªói", "Kh√¥ng th·ªÉ g·ª≠i b√°o c√°o.");
      }
    } catch (error) {
      console.error("L·ªói khi g·ª≠i b√°o c√°o:", error);
      Alert.alert("L·ªói", "ƒê√£ x·∫£y ra l·ªói khi g·ª≠i b√°o c√°o.");
    }

    setReportModalVisible(false);
    setSelectedReportReason(""); // Reset l√Ω do b√°o c√°o
  };

  const saveArticleToCollection = async (articleId: string) => {
    try {
      const userCollections = await usersClient.get(`${userId}/collections`);
      let defaultCollection: { collection: Collection; imgDefault: string } | undefined =
        userCollections.data.find((item: any) => item.collection.name === "T·∫•t c·∫£ b√†i vi·∫øt ƒë√£ l∆∞u");

      if (!defaultCollection) {
        const newCollectionResponse = await createCollection("T·∫•t c·∫£ b√†i vi·∫øt ƒë√£ l∆∞u");
        defaultCollection = {
          collection: newCollectionResponse,
          imgDefault: "https://storage.googleapis.com/kltn-hcmute/public/default/default_article.png",
        };
      }

      const isArticleAlreadyInCollection = defaultCollection.collection.items.some(
        (item: CollectionItem) => item._id === articleId
      );

      if (isArticleAlreadyInCollection) {
        Alert.alert("C·∫£nh b√°o", "B√†i vi·∫øt ƒë√£ c√≥ trong b·ªô s∆∞u t·∫≠p.");
        return;
      }

      const collectionAPI = restClient.apiClient.service(
        `apis/collections/${defaultCollection.collection._id}/article/${articleId}`
      );
      const result = await collectionAPI.create({});

      if (!result.success) {
        throw new Error(result.message || "Kh√¥ng th·ªÉ th√™m b√†i vi·∫øt v√†o b·ªô s∆∞u t·∫≠p.");
      }

      setIsSaved(true);
      Alert.alert("Th√†nh c√¥ng", "B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o b·ªô s∆∞u t·∫≠p.");
    } catch (error: any) {
      console.error("L·ªói khi l∆∞u b√†i vi·∫øt:", error);
      Alert.alert("L·ªói", error.message || "ƒê√£ x·∫£y ra l·ªói khi l∆∞u b√†i vi·∫øt.");
    }
  };

  return {
    handleOptions,
    isEditModalVisible,
    isReportModalVisible,
    editContent,
    editScope,
    editHashtags,
    setEditContent,
    setEditScope,
    setEditHashtags,
    saveEdit,
    setEditModalVisible,
    setReportModalVisible,
    selectedReportReason,
    setSelectedReportReason,
    submitReport,
    saveArticleToCollection,
    isSaved,
  };
};